// Generated by CoffeeScript 1.3.3
var App;

App = Ember.Application.create();

Ember.Fetchable = Ember.Mixin.create({
  fetchItems: (function(max_id) {
    var _this;
    _this = this;
    return $.Deferred(function(defer) {
      return $.ajax({
        url: _this.get('url'),
        dataType: 'json',
        data: {
          after: max_id
        }
      }).done(function(res) {
        return defer.resolve(res.results);
      });
    }).promise();
  }),
  fetch: (function(callback) {
    var _this;
    _this = this;
    return this.fetchItems(this.get('maxId')).done(function(tweets) {
      var items;
      items = tweets.map(function(v) {
        v['recent'] = true;
        return Ember.Object.create(v);
      }).reverse();
      _this.get('content').unshiftObjects(items);
      if (callback) {
        return callback();
      }
    });
  })
});

App.tweets = Ember.ArrayController.create(Ember.Fetchable, {
  content: [],
  maxId: 3,
  url: (function() {
    return './item.json?after=' + this.get('maxId');
  }).property('maxId'),
  recentCount: (function() {
    return this.get('content').filterProperty('recent', true).length;
  }).property('content.@each.recent'),
  expandRecent: (function() {
    return this.get('content').forEach(function(v) {
      return v.set('recent', false);
    });
  })
});

App.ApplicationView = Ember.View.extend();

App.TwitterListView = Ember.View.extend({
  templateName: 'twitter_list',
  contentBinding: 'App.tweets.content',
  recentCountBinding: 'App.tweets.recentCount',
  expandRecent: (function() {
    return App.tweets.expandRecent();
  }),
  hasRecentItems: (function() {
    return this.get('recentCount') > 0;
  }).property('recentCount'),
  items: (function() {
    return this.get('content').filterProperty('recent', false);
  }).property('content.@each.recent')
});

setInterval((function() {
  if (App.tweets.get('recentCount') < 10) {
    return App.tweets.fetch();
  }
}), 5000);

App.tweets.fetch(function() {
  return App.tweets.expandRecent();
});
